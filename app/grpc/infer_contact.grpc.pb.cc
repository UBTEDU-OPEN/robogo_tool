// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: infer_contact.proto

#include "infer_contact.pb.h"
#include "infer_contact.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace InferContact {

static const char* InferContactGrpc_method_names[] = {
  "/InferContact.InferContactGrpc/cmd_node",
  "/InferContact.InferContactGrpc/ai_init",
  "/InferContact.InferContactGrpc/unload",
};

std::unique_ptr< InferContactGrpc::Stub> InferContactGrpc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InferContactGrpc::Stub> stub(new InferContactGrpc::Stub(channel));
  return stub;
}

InferContactGrpc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_cmd_node_(InferContactGrpc_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ai_init_(InferContactGrpc_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_unload_(InferContactGrpc_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status InferContactGrpc::Stub::cmd_node(::grpc::ClientContext* context, const ::InferContact::data& request, ::InferContact::data* response) {
  return ::grpc::internal::BlockingUnaryCall< ::InferContact::data, ::InferContact::data, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_cmd_node_, context, request, response);
}

void InferContactGrpc::Stub::experimental_async::cmd_node(::grpc::ClientContext* context, const ::InferContact::data* request, ::InferContact::data* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::InferContact::data, ::InferContact::data, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_cmd_node_, context, request, response, std::move(f));
}

void InferContactGrpc::Stub::experimental_async::cmd_node(::grpc::ClientContext* context, const ::InferContact::data* request, ::InferContact::data* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_cmd_node_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InferContact::data>* InferContactGrpc::Stub::PrepareAsynccmd_nodeRaw(::grpc::ClientContext* context, const ::InferContact::data& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::InferContact::data, ::InferContact::data, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_cmd_node_, context, request);
}

::grpc::ClientAsyncResponseReader< ::InferContact::data>* InferContactGrpc::Stub::Asynccmd_nodeRaw(::grpc::ClientContext* context, const ::InferContact::data& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccmd_nodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InferContactGrpc::Stub::ai_init(::grpc::ClientContext* context, const ::InferContact::data& request, ::InferContact::data* response) {
  return ::grpc::internal::BlockingUnaryCall< ::InferContact::data, ::InferContact::data, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ai_init_, context, request, response);
}

void InferContactGrpc::Stub::experimental_async::ai_init(::grpc::ClientContext* context, const ::InferContact::data* request, ::InferContact::data* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::InferContact::data, ::InferContact::data, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ai_init_, context, request, response, std::move(f));
}

void InferContactGrpc::Stub::experimental_async::ai_init(::grpc::ClientContext* context, const ::InferContact::data* request, ::InferContact::data* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ai_init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InferContact::data>* InferContactGrpc::Stub::PrepareAsyncai_initRaw(::grpc::ClientContext* context, const ::InferContact::data& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::InferContact::data, ::InferContact::data, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ai_init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::InferContact::data>* InferContactGrpc::Stub::Asyncai_initRaw(::grpc::ClientContext* context, const ::InferContact::data& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncai_initRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InferContactGrpc::Stub::unload(::grpc::ClientContext* context, const ::InferContact::data& request, ::InferContact::data* response) {
  return ::grpc::internal::BlockingUnaryCall< ::InferContact::data, ::InferContact::data, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unload_, context, request, response);
}

void InferContactGrpc::Stub::experimental_async::unload(::grpc::ClientContext* context, const ::InferContact::data* request, ::InferContact::data* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::InferContact::data, ::InferContact::data, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unload_, context, request, response, std::move(f));
}

void InferContactGrpc::Stub::experimental_async::unload(::grpc::ClientContext* context, const ::InferContact::data* request, ::InferContact::data* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InferContact::data>* InferContactGrpc::Stub::PrepareAsyncunloadRaw(::grpc::ClientContext* context, const ::InferContact::data& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::InferContact::data, ::InferContact::data, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::InferContact::data>* InferContactGrpc::Stub::AsyncunloadRaw(::grpc::ClientContext* context, const ::InferContact::data& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunloadRaw(context, request, cq);
  result->StartCall();
  return result;
}

InferContactGrpc::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InferContactGrpc_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InferContactGrpc::Service, ::InferContact::data, ::InferContact::data, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InferContactGrpc::Service* service,
             ::grpc::ServerContext* ctx,
             const ::InferContact::data* req,
             ::InferContact::data* resp) {
               return service->cmd_node(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InferContactGrpc_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InferContactGrpc::Service, ::InferContact::data, ::InferContact::data, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InferContactGrpc::Service* service,
             ::grpc::ServerContext* ctx,
             const ::InferContact::data* req,
             ::InferContact::data* resp) {
               return service->ai_init(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InferContactGrpc_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InferContactGrpc::Service, ::InferContact::data, ::InferContact::data, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InferContactGrpc::Service* service,
             ::grpc::ServerContext* ctx,
             const ::InferContact::data* req,
             ::InferContact::data* resp) {
               return service->unload(ctx, req, resp);
             }, this)));
}

InferContactGrpc::Service::~Service() {
}

::grpc::Status InferContactGrpc::Service::cmd_node(::grpc::ServerContext* context, const ::InferContact::data* request, ::InferContact::data* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InferContactGrpc::Service::ai_init(::grpc::ServerContext* context, const ::InferContact::data* request, ::InferContact::data* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InferContactGrpc::Service::unload(::grpc::ServerContext* context, const ::InferContact::data* request, ::InferContact::data* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace InferContact

